#Question 2.2
boxplot(Y ~ Region, data = expenditure,
ylab="Per capita expenditure on shelters/housing assistance in state (Y)",
xlab="US region",
names=c("Northeast", "North Central", "South", "West"))
#Question 2.2
boxplot(Y ~ Region, data = expenditure,
ylab="Per capita expenditure on shelters/housing assistance in state (Y)",
xlab="US region",
names=c("Northeast", "North Central", "South", "West"))
#Answer 1.2: A one-tailed t-test was conducted to determine whether the average student IQ in the school was significantly greater than the national average of 100. The results indicated that the mean IQ (M = 98.44, SD = 13.09) was not significantly higher than 100, t(24) = -0.596, p = 0.722, one-tailed.
#####################
# Problem 2
#####################
#Question 2.1
expenditure <- read.table("https://raw.githubusercontent.com/ASDS-TCD/StatsI_2025/main/datasets/expenditure.txt", header=T)
head(expenditure)
str(expenditure)
?pairs
select_vars <- expenditure[,c("Y","X1","X2","X3")]
pairs(select_vars)
#Question 2.2
boxplot(Y ~ Region, data = expenditure,
ylab="Per capita expenditure on shelters/housing assistance in state (Y)",
xlab="US region",
names=c("Northeast", "North Central", "South", "West"))
#Question 2.2
boxplot(Y ~ Region, data = expenditure,
ylab="Per capita expenditure on shelters/housing assistance in state (Y)",
xlab="US region",
names=c("Northeast", "North Central", "South", "West"))
#Question 2.3
plot(expenditure$Y, expenditure$X1,
xlab="Per capita expenditure on shelters/housing assistance (Y)",
ylab="Per capita personal income in state(X1)")
#Answer 2.3: Y and X1 show a moderately positive linear relationship, suggesting that states with higher per capita income tend to spend more on shelters and housing assistance.
plot(expenditure$Y, expenditure$X1,
xlab="Per capita expenditure on shelters/housing assistance (Y)",
ylab="Per capita personal income in state (X1)",
col=expenditure$Region,
pch=expenditure$Region)
legend("topright",
legend = c("Northeast", "North Central", "South", "West"),
col = c(1, 2, 3, 4),       # Match region codes to colors
pch = c(1, 2, 3, 4))       # Match region codes to point shapes
#####################
# Problem 1
#####################
#Question 1.1
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
n <- length(y)
y_mean <- mean(y)
y_sd <- sd(y)
z95 <- qt((1 - .90), df = (n - 1)), lower.tail = FALSE)
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
#####################
# Problem 1
#####################
#Question 1.1
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
n <- length(y)
y_mean <- mean(y)
y_sd <- sd(y)
z95 <- qt((1 - .90), df = (n - 1)), lower.tail = FALSE)
z95 <- qt((1 - .90), df = (n - 1), lower.tail = FALSE)
z95
lower_bound <- y_mean - (z95 * (y_sd/sqrt(n)))
upper_bound <- y_mean + (z95 * (y_sd/sqrt(n)))
ci <- c(lower_bound, upper_bound)
ci
t.test(y, mu = 100, alternative = "greater")
mu <- 100
se <- y_sd / sqrt(n)
t_statistic <- (y_mean - mu) / se
print(t_statistic)
t_statistic
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
n <- length(y)
y_mean <- mean(y)
y_sd <- sd(y)
z90 <- qt((1 - .90), df = (n - 1), lower.tail = FALSE)
z90
lower_bound <- y_mean - (z90 * (y_sd/sqrt(n)))
upper_bound <- y_mean + (z90 * (y_sd/sqrt(n)))
ci <- c(lower_bound, upper_bound)
ci
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
n <- length(y)
y_mean <- mean(y)
y_sd <- sd(y)
t90 <- qt((1 - .90), df = (n - 1), lower.tail = FALSE)
t90
lower_bound <- y_mean - (t90 * (y_sd/sqrt(n)))
upper_bound <- y_mean + (t90 * (y_sd/sqrt(n)))
ci <- c(lower_bound, upper_bound)
ci
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
n <- length(y)
y_mean <- mean(y)
y_sd <- sd(y)
t90 <- qt((1 - .90), df = (n - 1), lower.tail = FALSE)
t90
lower_bound <- y_mean - (t90 * (y_sd/sqrt(n)))
upper_bound <- y_mean + (t90 * (y_sd/sqrt(n)))
ci <- c(lower_bound, upper_bound)
ci
mu <- 100
se <- y_sd / sqrt(n)
t_statistic <- (y_mean - mu) / se
t_statistic
t95 <- qt((1 - .95), df = (n - 1), lower.tail = FALSE)
t95
mu <- 100
se <- y_sd / sqrt(n)
t_statistic <- (y_mean - mu) / se
t_statistic
#comparing t-statistic to the critical t-value
t_crit <- qt((1 - .95), df = (n - 1), lower.tail = FALSE)
is_significant <- t_statistic > t95
is_significant
t_crit <- qt((1 - .95), df = (n - 1), lower.tail = FALSE)
is_significant <- t_statistic > t_crit
is_significant
t_crit
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
#####################
# Problem 1
#####################
#Question 1.1
y <- c(105, 69, 86, 100, 82, 111, 104, 110, 87, 108, 87, 90, 94, 113, 112, 98, 80, 97, 95, 111, 114, 89, 95, 126, 98)
n <- length(y)
y_mean <- mean(y)
y_sd <- sd(y)
t90 <- qt((1 - .90), df = (n - 1), lower.tail = FALSE)
t90
lower_bound <- y_mean - (t90 * (y_sd/sqrt(n)))
upper_bound <- y_mean + (t90 * (y_sd/sqrt(n)))
ci <- c(lower_bound, upper_bound)
ci
#Answer 1.1: The 90% confidence interval of the random sample of 25 studentsâ€™ IQ scores lies between 95.08 and 101.80
#Question 1.2
#t test
t.test(y, mu = 100, alternative = "greater")
#manual procedure
#test statistic
mu <- 100
se <- y_sd / sqrt(n)
t_statistic <- (y_mean - mu) / se
t_statistic
#comparing t-statistic to the critical t-value
t_crit <- qt((1 - .95), df = (n - 1), lower.tail = FALSE)
is_significant <- t_statistic > t_crit
is_significant
t_crit
#calculating test statistic
mu <- 100
se <- y_sd / sqrt(n)
t_statistic <- (y_mean - mu) / se
t_statistic
#comparing t-statistic to the critical t-value
t_crit <- qt((1 - .95), df = (n - 1), lower.tail = FALSE)
is_significant <- t_statistic > t_crit
is_significant
t_crit
#Question 1.2
#calculating test statistic
mu <- 100
se <- y_sd / sqrt(n)
t_statistic <- (y_mean - mu) / se
t_statistic
#comparing t-statistic to the critical t-value
t_crit <- qt((1 - .95), df = (n - 1), lower.tail = FALSE)
is_significant <- t_statistic > t_crit
is_significant
